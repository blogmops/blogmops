"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const debug_1 = require("../debug");
const getConf_1 = __importDefault(require("../getConf"));
const getScript_1 = __importDefault(require("./getScript"));
const is_1 = require("./is");
const hookList = [
    'applypatch-msg',
    'pre-applypatch',
    'post-applypatch',
    'pre-commit',
    'pre-merge-commit',
    'prepare-commit-msg',
    'commit-msg',
    'post-commit',
    'pre-rebase',
    'post-checkout',
    'post-merge',
    'pre-push',
    'pre-receive',
    'update',
    'post-receive',
    'post-update',
    'push-to-checkout',
    'pre-auto-gc',
    'post-rewrite',
    'sendemail-validate'
];
function writeHook(filename, script) {
    fs_1.default.writeFileSync(filename, script, 'utf-8');
    fs_1.default.chmodSync(filename, 0o0755);
}
function createHook(filename, script) {
    // Get name, used for logging
    const name = path_1.default.basename(filename);
    // Check if hook exist
    if (fs_1.default.existsSync(filename)) {
        const hook = fs_1.default.readFileSync(filename, 'utf-8');
        // Migrate
        if (is_1.isGhooks(hook)) {
            console.log(`migrating existing ghooks script: ${name}`);
            return writeHook(filename, script);
        }
        // Migrate
        if (is_1.isPreCommit(hook)) {
            console.log(`migrating existing pre-commit script: ${name}`);
            return writeHook(filename, script);
        }
        // Update
        if (is_1.isHusky(hook) || is_1.isYorkie(hook)) {
            return writeHook(filename, script);
        }
        // Skip
        console.log(`skipping existing user hook: ${name}`);
        return;
    }
    // Create hook if it doesn't exist
    writeHook(filename, script);
}
function createHooks(filenames, script) {
    filenames.forEach((filename) => createHook(filename, script));
}
function canRemove(filename) {
    if (fs_1.default.existsSync(filename)) {
        const data = fs_1.default.readFileSync(filename, 'utf-8');
        return is_1.isHusky(data);
    }
    return false;
}
function removeHook(filename) {
    fs_1.default.unlinkSync(filename);
}
function removeHooks(filenames) {
    filenames.filter(canRemove).forEach(removeHook);
}
// This prevents the case where someone would want to debug a node_module that has
// husky as devDependency and run npm install from node_modules directory
function isInNodeModules(dir) {
    return dir.indexOf('node_modules') !== -1;
}
function getGitHooksDir(gitDir) {
    return path_1.default.join(gitDir, 'hooks');
}
function getHooks(gitDir) {
    const gitHooksDir = getGitHooksDir(gitDir);
    return hookList.map((hookName) => path_1.default.join(gitHooksDir, hookName));
}
function install({ absoluteGitCommonDir, relativeUserPkgDir, userPkgDir, pmName, // package manager name
isCI // running in CI or not
 }) {
    // Get conf from package.json or .huskyrc
    const conf = getConf_1.default(userPkgDir);
    // Checks
    if (isCI && conf.skipCI) {
        console.log('CI detected, skipping Git hooks installation.');
        return;
    }
    if (isInNodeModules(userPkgDir)) {
        console.log('Trying to install from node_modules directory, skipping Git hooks installation.');
        return;
    }
    // Create hooks directory if it doesn't exist
    const gitHooksDir = getGitHooksDir(absoluteGitCommonDir);
    if (!fs_1.default.existsSync(gitHooksDir)) {
        fs_1.default.mkdirSync(gitHooksDir);
    }
    debug_1.debug(`Installing hooks in ${gitHooksDir}`);
    const hooks = getHooks(absoluteGitCommonDir);
    // Prefix can be an empty string
    const script = getScript_1.default({ relativeUserPkgDir, pmName });
    createHooks(hooks, script);
}
exports.install = install;
function uninstall({ absoluteGitCommonDir, userPkgDir }) {
    if (isInNodeModules(userPkgDir)) {
        console.log('Trying to uninstall from node_modules directory, skipping Git hooks uninstallation.');
        return;
    }
    // Remove hooks
    const hooks = getHooks(absoluteGitCommonDir);
    removeHooks(hooks);
}
exports.uninstall = uninstall;
