(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1646760835314;

	const files = [
		"service-worker-index.html",
		"favicon.ico",
		"favicon.png",
		"fonts/merriweather-latin-300.woff",
		"fonts/merriweather-latin-300.woff2",
		"fonts/merriweather-latin-300italic.woff",
		"fonts/merriweather-latin-300italic.woff2",
		"fonts/merriweather-latin-400.woff",
		"fonts/merriweather-latin-400.woff2",
		"fonts/merriweather-latin-400italic.woff",
		"fonts/merriweather-latin-400italic.woff2",
		"fonts/merriweather-latin-700.woff",
		"fonts/merriweather-latin-700.woff2",
		"fonts/merriweather-latin-700italic.woff",
		"fonts/merriweather-latin-700italic.woff2",
		"fonts/merriweather-latin-900.woff",
		"fonts/merriweather-latin-900.woff2",
		"fonts/merriweather-latin-900italic.woff",
		"fonts/merriweather-latin-900italic.woff2",
		"fonts/rubik-latin-300.woff",
		"fonts/rubik-latin-300.woff2",
		"fonts/rubik-latin-300italic.woff",
		"fonts/rubik-latin-300italic.woff2",
		"fonts/rubik-latin-400.woff",
		"fonts/rubik-latin-400.woff2",
		"fonts/rubik-latin-400italic.woff",
		"fonts/rubik-latin-400italic.woff2",
		"fonts/rubik-latin-500.woff",
		"fonts/rubik-latin-500.woff2",
		"fonts/rubik-latin-500italic.woff",
		"fonts/rubik-latin-500italic.woff2",
		"fonts/rubik-latin-700.woff",
		"fonts/rubik-latin-700.woff2",
		"fonts/rubik-latin-700italic.woff",
		"fonts/rubik-latin-700italic.woff2",
		"fonts/rubik-latin-900.woff",
		"fonts/rubik-latin-900.woff2",
		"fonts/rubik-latin-900italic.woff",
		"fonts/rubik-latin-900italic.woff2",
		"fonts.css",
		"global.css",
		"highlight.css",
		"images/blog/hello/hello001.webp",
		"images/blog/hello/hello002.webp",
		"images/blog/office/office001.webp",
		"images/blog/office/office002.webp",
		"images/blogmops.webp",
		"logo-16.png",
		"logo-192.png",
		"logo-32.png",
		"logo-512.png",
		"logo.png",
		"manifest.json"
	];

	const shell = [
		
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
	  event.waitUntil(
	    caches
	      .open(ASSETS)
	      .then(cache => cache.addAll(to_cache))
	      .then(() => {
	        self.skipWaiting();
	      }),
	  );
	});

	self.addEventListener('activate', event => {
	  event.waitUntil(
	    caches.keys().then(async keys => {
	      // delete old caches
	      for (const key of keys) {
	        if (key !== ASSETS) await caches.delete(key);
	      }

	      self.clients.claim();
	    }),
	  );
	});

	self.addEventListener('fetch', event => {
	  if (event.request.method !== 'GET' || event.request.headers.has('range'))
	    return;

	  const url = new URL(event.request.url);

	  // don't try to handle e.g. data: URIs
	  if (!url.protocol.startsWith('http')) return;

	  // ignore dev server requests
	  if (
	    url.hostname === self.location.hostname &&
	    url.port !== self.location.port
	  )
	    return;

	  // always serve static files and bundler-generated assets from cache
	  if (url.host === self.location.host && cached.has(url.pathname)) {
	    event.respondWith(caches.match(event.request));
	    return;
	  }

	  // for pages, you might want to serve a shell `service-worker-index.html` file,
	  // which Sapper has generated for you. It's not right for every
	  // app, but if it's right for yours then uncomment this section
	  /*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

	  if (event.request.cache === 'only-if-cached') return;

	  // for everything else, try the network first, falling back to
	  // cache if the user is offline. (If the pages never change, you
	  // might prefer a cache-first approach to a network-first one.)
	  event.respondWith(
	    caches.open(`offline${timestamp}`).then(async cache => {
	      try {
	        const response = await fetch(event.request);
	        cache.put(event.request, response.clone());
	        return response;
	      } catch (err) {
	        const response = await cache.match(event.request);
	        if (response) return response;

	        throw err;
	      }
	    }),
	  );
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
