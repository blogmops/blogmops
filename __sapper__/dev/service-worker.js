(function () {
	'use strict';

	// This file is generated by Sapper â€” do not edit it!
	const timestamp = 1646775134498;

	const files = [
		"service-worker-index.html",
		"favicon.ico",
		"favicon.png",
		"fonts/merriweather-latin-300.woff",
		"fonts/merriweather-latin-300.woff2",
		"fonts/merriweather-latin-300italic.woff",
		"fonts/merriweather-latin-300italic.woff2",
		"fonts/merriweather-latin-400.woff",
		"fonts/merriweather-latin-400.woff2",
		"fonts/merriweather-latin-400italic.woff",
		"fonts/merriweather-latin-400italic.woff2",
		"fonts/merriweather-latin-700.woff",
		"fonts/merriweather-latin-700.woff2",
		"fonts/merriweather-latin-700italic.woff",
		"fonts/merriweather-latin-700italic.woff2",
		"fonts/merriweather-latin-900.woff",
		"fonts/merriweather-latin-900.woff2",
		"fonts/merriweather-latin-900italic.woff",
		"fonts/merriweather-latin-900italic.woff2",
		"fonts/rubik-latin-300.woff",
		"fonts/rubik-latin-300.woff2",
		"fonts/rubik-latin-300italic.woff",
		"fonts/rubik-latin-300italic.woff2",
		"fonts/rubik-latin-400.woff",
		"fonts/rubik-latin-400.woff2",
		"fonts/rubik-latin-400italic.woff",
		"fonts/rubik-latin-400italic.woff2",
		"fonts/rubik-latin-500.woff",
		"fonts/rubik-latin-500.woff2",
		"fonts/rubik-latin-500italic.woff",
		"fonts/rubik-latin-500italic.woff2",
		"fonts/rubik-latin-700.woff",
		"fonts/rubik-latin-700.woff2",
		"fonts/rubik-latin-700italic.woff",
		"fonts/rubik-latin-700italic.woff2",
		"fonts/rubik-latin-900.woff",
		"fonts/rubik-latin-900.woff2",
		"fonts/rubik-latin-900italic.woff",
		"fonts/rubik-latin-900italic.woff2",
		"fonts.css",
		"global.css",
		"highlight.css",
		"images/blog/hello/hello001.webp",
		"images/blog/hello/hello002.webp",
		"images/blog/office/office001.webp",
		"images/blog/office/office002.webp",
		"images/blogmops.webp",
		"logo-16.png",
		"logo-192.png",
		"logo-32.png",
		"logo-512.png",
		"logo.png",
		"manifest.json"
	];

	const shell = [
		"client/internal.2ee3a6ff.js",
		"client/client.5f73f4c2.js",
		"client/Breadcrumb.0c12a18f.js",
		"client/index.3cdb0831.js",
		"client/contact.5d75bff0.js",
		"client/about.09787843.js",
		"client/[slug].29e3fa0b.js",
		"client/[page([0-9]+)].999ccc4b.js",
		"client/sapper-dev-client.1e7a4a5e.js"
	];

	const ASSETS = `cache${timestamp}`;

	// `shell` is an array of all the files generated by the bundler,
	// `files` is an array of everything in the `static` directory
	const to_cache = shell.concat(files);
	const cached = new Set(to_cache);

	self.addEventListener('install', event => {
	  event.waitUntil(
	    caches
	      .open(ASSETS)
	      .then(cache => cache.addAll(to_cache))
	      .then(() => {
	        self.skipWaiting();
	      }),
	  );
	});

	self.addEventListener('activate', event => {
	  event.waitUntil(
	    caches.keys().then(async keys => {
	      // delete old caches
	      for (const key of keys) {
	        if (key !== ASSETS) await caches.delete(key);
	      }

	      self.clients.claim();
	    }),
	  );
	});

	self.addEventListener('fetch', event => {
	  if (event.request.method !== 'GET' || event.request.headers.has('range'))
	    return;

	  const url = new URL(event.request.url);

	  // don't try to handle e.g. data: URIs
	  if (!url.protocol.startsWith('http')) return;

	  // ignore dev server requests
	  if (
	    url.hostname === self.location.hostname &&
	    url.port !== self.location.port
	  )
	    return;

	  // always serve static files and bundler-generated assets from cache
	  if (url.host === self.location.host && cached.has(url.pathname)) {
	    event.respondWith(caches.match(event.request));
	    return;
	  }

	  // for pages, you might want to serve a shell `service-worker-index.html` file,
	  // which Sapper has generated for you. It's not right for every
	  // app, but if it's right for yours then uncomment this section
	  /*
		if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
			event.respondWith(caches.match('/service-worker-index.html'));
			return;
		}
		*/

	  if (event.request.cache === 'only-if-cached') return;

	  // for everything else, try the network first, falling back to
	  // cache if the user is offline. (If the pages never change, you
	  // might prefer a cache-first approach to a network-first one.)
	  event.respondWith(
	    caches.open(`offline${timestamp}`).then(async cache => {
	      try {
	        const response = await fetch(event.request);
	        cache.put(event.request, response.clone());
	        return response;
	      } catch (err) {
	        const response = await cache.match(event.request);
	        if (response) return response;

	        throw err;
	      }
	    }),
	  );
	});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZS13b3JrZXIuanMiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub2RlX21vZHVsZXMvQHNhcHBlci9zZXJ2aWNlLXdvcmtlci5qcyIsIi4uLy4uL3NyYy9zZXJ2aWNlLXdvcmtlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGZpbGUgaXMgZ2VuZXJhdGVkIGJ5IFNhcHBlciDigJQgZG8gbm90IGVkaXQgaXQhXG5leHBvcnQgY29uc3QgdGltZXN0YW1wID0gMTY0Njc3NTEzNDQ5ODtcblxuZXhwb3J0IGNvbnN0IGZpbGVzID0gW1xuXHRcInNlcnZpY2Utd29ya2VyLWluZGV4Lmh0bWxcIixcblx0XCJmYXZpY29uLmljb1wiLFxuXHRcImZhdmljb24ucG5nXCIsXG5cdFwiZm9udHMvbWVycml3ZWF0aGVyLWxhdGluLTMwMC53b2ZmXCIsXG5cdFwiZm9udHMvbWVycml3ZWF0aGVyLWxhdGluLTMwMC53b2ZmMlwiLFxuXHRcImZvbnRzL21lcnJpd2VhdGhlci1sYXRpbi0zMDBpdGFsaWMud29mZlwiLFxuXHRcImZvbnRzL21lcnJpd2VhdGhlci1sYXRpbi0zMDBpdGFsaWMud29mZjJcIixcblx0XCJmb250cy9tZXJyaXdlYXRoZXItbGF0aW4tNDAwLndvZmZcIixcblx0XCJmb250cy9tZXJyaXdlYXRoZXItbGF0aW4tNDAwLndvZmYyXCIsXG5cdFwiZm9udHMvbWVycml3ZWF0aGVyLWxhdGluLTQwMGl0YWxpYy53b2ZmXCIsXG5cdFwiZm9udHMvbWVycml3ZWF0aGVyLWxhdGluLTQwMGl0YWxpYy53b2ZmMlwiLFxuXHRcImZvbnRzL21lcnJpd2VhdGhlci1sYXRpbi03MDAud29mZlwiLFxuXHRcImZvbnRzL21lcnJpd2VhdGhlci1sYXRpbi03MDAud29mZjJcIixcblx0XCJmb250cy9tZXJyaXdlYXRoZXItbGF0aW4tNzAwaXRhbGljLndvZmZcIixcblx0XCJmb250cy9tZXJyaXdlYXRoZXItbGF0aW4tNzAwaXRhbGljLndvZmYyXCIsXG5cdFwiZm9udHMvbWVycml3ZWF0aGVyLWxhdGluLTkwMC53b2ZmXCIsXG5cdFwiZm9udHMvbWVycml3ZWF0aGVyLWxhdGluLTkwMC53b2ZmMlwiLFxuXHRcImZvbnRzL21lcnJpd2VhdGhlci1sYXRpbi05MDBpdGFsaWMud29mZlwiLFxuXHRcImZvbnRzL21lcnJpd2VhdGhlci1sYXRpbi05MDBpdGFsaWMud29mZjJcIixcblx0XCJmb250cy9ydWJpay1sYXRpbi0zMDAud29mZlwiLFxuXHRcImZvbnRzL3J1YmlrLWxhdGluLTMwMC53b2ZmMlwiLFxuXHRcImZvbnRzL3J1YmlrLWxhdGluLTMwMGl0YWxpYy53b2ZmXCIsXG5cdFwiZm9udHMvcnViaWstbGF0aW4tMzAwaXRhbGljLndvZmYyXCIsXG5cdFwiZm9udHMvcnViaWstbGF0aW4tNDAwLndvZmZcIixcblx0XCJmb250cy9ydWJpay1sYXRpbi00MDAud29mZjJcIixcblx0XCJmb250cy9ydWJpay1sYXRpbi00MDBpdGFsaWMud29mZlwiLFxuXHRcImZvbnRzL3J1YmlrLWxhdGluLTQwMGl0YWxpYy53b2ZmMlwiLFxuXHRcImZvbnRzL3J1YmlrLWxhdGluLTUwMC53b2ZmXCIsXG5cdFwiZm9udHMvcnViaWstbGF0aW4tNTAwLndvZmYyXCIsXG5cdFwiZm9udHMvcnViaWstbGF0aW4tNTAwaXRhbGljLndvZmZcIixcblx0XCJmb250cy9ydWJpay1sYXRpbi01MDBpdGFsaWMud29mZjJcIixcblx0XCJmb250cy9ydWJpay1sYXRpbi03MDAud29mZlwiLFxuXHRcImZvbnRzL3J1YmlrLWxhdGluLTcwMC53b2ZmMlwiLFxuXHRcImZvbnRzL3J1YmlrLWxhdGluLTcwMGl0YWxpYy53b2ZmXCIsXG5cdFwiZm9udHMvcnViaWstbGF0aW4tNzAwaXRhbGljLndvZmYyXCIsXG5cdFwiZm9udHMvcnViaWstbGF0aW4tOTAwLndvZmZcIixcblx0XCJmb250cy9ydWJpay1sYXRpbi05MDAud29mZjJcIixcblx0XCJmb250cy9ydWJpay1sYXRpbi05MDBpdGFsaWMud29mZlwiLFxuXHRcImZvbnRzL3J1YmlrLWxhdGluLTkwMGl0YWxpYy53b2ZmMlwiLFxuXHRcImZvbnRzLmNzc1wiLFxuXHRcImdsb2JhbC5jc3NcIixcblx0XCJoaWdobGlnaHQuY3NzXCIsXG5cdFwiaW1hZ2VzL2Jsb2cvaGVsbG8vaGVsbG8wMDEud2VicFwiLFxuXHRcImltYWdlcy9ibG9nL2hlbGxvL2hlbGxvMDAyLndlYnBcIixcblx0XCJpbWFnZXMvYmxvZy9vZmZpY2Uvb2ZmaWNlMDAxLndlYnBcIixcblx0XCJpbWFnZXMvYmxvZy9vZmZpY2Uvb2ZmaWNlMDAyLndlYnBcIixcblx0XCJpbWFnZXMvYmxvZ21vcHMud2VicFwiLFxuXHRcImxvZ28tMTYucG5nXCIsXG5cdFwibG9nby0xOTIucG5nXCIsXG5cdFwibG9nby0zMi5wbmdcIixcblx0XCJsb2dvLTUxMi5wbmdcIixcblx0XCJsb2dvLnBuZ1wiLFxuXHRcIm1hbmlmZXN0Lmpzb25cIlxuXTtcbmV4cG9ydCB7IGZpbGVzIGFzIGFzc2V0cyB9OyAvLyBsZWdhY3lcblxuZXhwb3J0IGNvbnN0IHNoZWxsID0gW1xuXHRcImNsaWVudC9pbnRlcm5hbC4yZWUzYTZmZi5qc1wiLFxuXHRcImNsaWVudC9jbGllbnQuNWY3M2Y0YzIuanNcIixcblx0XCJjbGllbnQvQnJlYWRjcnVtYi4wYzEyYTE4Zi5qc1wiLFxuXHRcImNsaWVudC9pbmRleC4zY2RiMDgzMS5qc1wiLFxuXHRcImNsaWVudC9jb250YWN0LjVkNzViZmYwLmpzXCIsXG5cdFwiY2xpZW50L2Fib3V0LjA5Nzg3ODQzLmpzXCIsXG5cdFwiY2xpZW50L1tzbHVnXS4yOWUzZmEwYi5qc1wiLFxuXHRcImNsaWVudC9bcGFnZShbMC05XSspXS45OTljY2M0Yi5qc1wiLFxuXHRcImNsaWVudC9zYXBwZXItZGV2LWNsaWVudC4xZTdhNGE1ZS5qc1wiXG5dO1xuXG5leHBvcnQgY29uc3Qgcm91dGVzID0gW1xuXHR7IHBhdHRlcm46IC9eXFwvJC8gfSxcblx0eyBwYXR0ZXJuOiAvXlxcL2NvbnRhY3RcXC8/JC8gfSxcblx0eyBwYXR0ZXJuOiAvXlxcL2Fib3V0XFwvPyQvIH0sXG5cdHsgcGF0dGVybjogL15cXC9ibG9nXFwvKFteXFwvXSs/KVxcLz8kLyB9LFxuXHR7IHBhdHRlcm46IC9eXFwvKFswLTldKylcXC8/JC8gfVxuXTsiLCJpbXBvcnQgeyB0aW1lc3RhbXAsIGZpbGVzLCBzaGVsbCwgcm91dGVzIH0gZnJvbSAnQHNhcHBlci9zZXJ2aWNlLXdvcmtlcic7XG5cbmNvbnN0IEFTU0VUUyA9IGBjYWNoZSR7dGltZXN0YW1wfWA7XG5cbi8vIGBzaGVsbGAgaXMgYW4gYXJyYXkgb2YgYWxsIHRoZSBmaWxlcyBnZW5lcmF0ZWQgYnkgdGhlIGJ1bmRsZXIsXG4vLyBgZmlsZXNgIGlzIGFuIGFycmF5IG9mIGV2ZXJ5dGhpbmcgaW4gdGhlIGBzdGF0aWNgIGRpcmVjdG9yeVxuY29uc3QgdG9fY2FjaGUgPSBzaGVsbC5jb25jYXQoZmlsZXMpO1xuY29uc3QgY2FjaGVkID0gbmV3IFNldCh0b19jYWNoZSk7XG5cbnNlbGYuYWRkRXZlbnRMaXN0ZW5lcignaW5zdGFsbCcsIGV2ZW50ID0+IHtcbiAgZXZlbnQud2FpdFVudGlsKFxuICAgIGNhY2hlc1xuICAgICAgLm9wZW4oQVNTRVRTKVxuICAgICAgLnRoZW4oY2FjaGUgPT4gY2FjaGUuYWRkQWxsKHRvX2NhY2hlKSlcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgc2VsZi5za2lwV2FpdGluZygpO1xuICAgICAgfSksXG4gICk7XG59KTtcblxuc2VsZi5hZGRFdmVudExpc3RlbmVyKCdhY3RpdmF0ZScsIGV2ZW50ID0+IHtcbiAgZXZlbnQud2FpdFVudGlsKFxuICAgIGNhY2hlcy5rZXlzKCkudGhlbihhc3luYyBrZXlzID0+IHtcbiAgICAgIC8vIGRlbGV0ZSBvbGQgY2FjaGVzXG4gICAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgICAgIGlmIChrZXkgIT09IEFTU0VUUykgYXdhaXQgY2FjaGVzLmRlbGV0ZShrZXkpO1xuICAgICAgfVxuXG4gICAgICBzZWxmLmNsaWVudHMuY2xhaW0oKTtcbiAgICB9KSxcbiAgKTtcbn0pO1xuXG5zZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ2ZldGNoJywgZXZlbnQgPT4ge1xuICBpZiAoZXZlbnQucmVxdWVzdC5tZXRob2QgIT09ICdHRVQnIHx8IGV2ZW50LnJlcXVlc3QuaGVhZGVycy5oYXMoJ3JhbmdlJykpXG4gICAgcmV0dXJuO1xuXG4gIGNvbnN0IHVybCA9IG5ldyBVUkwoZXZlbnQucmVxdWVzdC51cmwpO1xuXG4gIC8vIGRvbid0IHRyeSB0byBoYW5kbGUgZS5nLiBkYXRhOiBVUklzXG4gIGlmICghdXJsLnByb3RvY29sLnN0YXJ0c1dpdGgoJ2h0dHAnKSkgcmV0dXJuO1xuXG4gIC8vIGlnbm9yZSBkZXYgc2VydmVyIHJlcXVlc3RzXG4gIGlmIChcbiAgICB1cmwuaG9zdG5hbWUgPT09IHNlbGYubG9jYXRpb24uaG9zdG5hbWUgJiZcbiAgICB1cmwucG9ydCAhPT0gc2VsZi5sb2NhdGlvbi5wb3J0XG4gIClcbiAgICByZXR1cm47XG5cbiAgLy8gYWx3YXlzIHNlcnZlIHN0YXRpYyBmaWxlcyBhbmQgYnVuZGxlci1nZW5lcmF0ZWQgYXNzZXRzIGZyb20gY2FjaGVcbiAgaWYgKHVybC5ob3N0ID09PSBzZWxmLmxvY2F0aW9uLmhvc3QgJiYgY2FjaGVkLmhhcyh1cmwucGF0aG5hbWUpKSB7XG4gICAgZXZlbnQucmVzcG9uZFdpdGgoY2FjaGVzLm1hdGNoKGV2ZW50LnJlcXVlc3QpKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBmb3IgcGFnZXMsIHlvdSBtaWdodCB3YW50IHRvIHNlcnZlIGEgc2hlbGwgYHNlcnZpY2Utd29ya2VyLWluZGV4Lmh0bWxgIGZpbGUsXG4gIC8vIHdoaWNoIFNhcHBlciBoYXMgZ2VuZXJhdGVkIGZvciB5b3UuIEl0J3Mgbm90IHJpZ2h0IGZvciBldmVyeVxuICAvLyBhcHAsIGJ1dCBpZiBpdCdzIHJpZ2h0IGZvciB5b3VycyB0aGVuIHVuY29tbWVudCB0aGlzIHNlY3Rpb25cbiAgLypcblx0aWYgKHVybC5vcmlnaW4gPT09IHNlbGYub3JpZ2luICYmIHJvdXRlcy5maW5kKHJvdXRlID0+IHJvdXRlLnBhdHRlcm4udGVzdCh1cmwucGF0aG5hbWUpKSkge1xuXHRcdGV2ZW50LnJlc3BvbmRXaXRoKGNhY2hlcy5tYXRjaCgnL3NlcnZpY2Utd29ya2VyLWluZGV4Lmh0bWwnKSk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdCovXG5cbiAgaWYgKGV2ZW50LnJlcXVlc3QuY2FjaGUgPT09ICdvbmx5LWlmLWNhY2hlZCcpIHJldHVybjtcblxuICAvLyBmb3IgZXZlcnl0aGluZyBlbHNlLCB0cnkgdGhlIG5ldHdvcmsgZmlyc3QsIGZhbGxpbmcgYmFjayB0b1xuICAvLyBjYWNoZSBpZiB0aGUgdXNlciBpcyBvZmZsaW5lLiAoSWYgdGhlIHBhZ2VzIG5ldmVyIGNoYW5nZSwgeW91XG4gIC8vIG1pZ2h0IHByZWZlciBhIGNhY2hlLWZpcnN0IGFwcHJvYWNoIHRvIGEgbmV0d29yay1maXJzdCBvbmUuKVxuICBldmVudC5yZXNwb25kV2l0aChcbiAgICBjYWNoZXMub3Blbihgb2ZmbGluZSR7dGltZXN0YW1wfWApLnRoZW4oYXN5bmMgY2FjaGUgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChldmVudC5yZXF1ZXN0KTtcbiAgICAgICAgY2FjaGUucHV0KGV2ZW50LnJlcXVlc3QsIHJlc3BvbnNlLmNsb25lKCkpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjYWNoZS5tYXRjaChldmVudC5yZXF1ZXN0KTtcbiAgICAgICAgaWYgKHJlc3BvbnNlKSByZXR1cm4gcmVzcG9uc2U7XG5cbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH0pLFxuICApO1xufSk7XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0NBQUE7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
