import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, a as space, e as element, t as text, q as create_component, h as claim_space, c as claim_element, b as children, f as claim_text, g as detach_dev, r as claim_component, j as attr_dev, k as add_location, m as insert_dev, o as append_dev, u as mount_component, x as transition_in, y as transition_out, z as destroy_component } from './index.d5c520b0.js';
import { P as Posts, B as Breadcrumb } from './Breadcrumb.02afad66.js';

/* src\routes\index.svelte generated by Svelte v3.16.7 */
const file = "src\\routes\\index.svelte";

function create_fragment(ctx) {
	let t0;
	let div;
	let h1;
	let t1;
	let t2;
	let p;
	let t3;
	let t4;
	let t5;
	let current;

	const posts_1 = new Posts({
			props: {
				posts: /*posts*/ ctx[0],
				limit: /*postsPerPage*/ ctx[1]
			},
			$$inline: true
		});

	const breadcrumb = new Breadcrumb({
			props: {
				isFirst: true,
				isLast: /*postsPerPage*/ ctx[1] > /*posts*/ ctx[0].length,
				page: "1"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			t0 = space();
			div = element("div");
			h1 = element("h1");
			t1 = text("Welcome on my blog");
			t2 = space();
			p = element("p");
			t3 = text("Explore all my adentures");
			t4 = space();
			create_component(posts_1.$$.fragment);
			t5 = space();
			create_component(breadcrumb.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			t0 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			h1 = claim_element(div_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Welcome on my blog");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(div_nodes);
			p = claim_element(div_nodes, "P", {});
			var p_nodes = children(p);
			t3 = claim_text(p_nodes, "Explore all my adentures");
			p_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			claim_component(posts_1.$$.fragment, nodes);
			t5 = claim_space(nodes);
			claim_component(breadcrumb.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			document.title = "Stunning Theme";
			attr_dev(h1, "class", "svelte-1e3oi4v");
			add_location(h1, file, 57, 2, 1094);
			add_location(p, file, 58, 2, 1124);
			attr_dev(div, "class", "hero-section svelte-1e3oi4v");
			add_location(div, file, 56, 0, 1065);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div, anchor);
			append_dev(div, h1);
			append_dev(h1, t1);
			append_dev(div, t2);
			append_dev(div, p);
			append_dev(p, t3);
			insert_dev(target, t4, anchor);
			mount_component(posts_1, target, anchor);
			insert_dev(target, t5, anchor);
			mount_component(breadcrumb, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const posts_1_changes = {};
			if (dirty & /*posts*/ 1) posts_1_changes.posts = /*posts*/ ctx[0];
			if (dirty & /*postsPerPage*/ 2) posts_1_changes.limit = /*postsPerPage*/ ctx[1];
			posts_1.$set(posts_1_changes);
			const breadcrumb_changes = {};
			if (dirty & /*postsPerPage, posts*/ 3) breadcrumb_changes.isLast = /*postsPerPage*/ ctx[1] > /*posts*/ ctx[0].length;
			breadcrumb.$set(breadcrumb_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(posts_1.$$.fragment, local);
			transition_in(breadcrumb.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(posts_1.$$.fragment, local);
			transition_out(breadcrumb.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div);
			if (detaching) detach_dev(t4);
			destroy_component(posts_1, detaching);
			if (detaching) detach_dev(t5);
			destroy_component(breadcrumb, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload(page, session) {
	const res = await this.fetch(`index.json`);
	const response = await res.json();
	return response;
}

function instance($$self, $$props, $$invalidate) {
	let { posts } = $$props;
	let { postsPerPage } = $$props;
	const writable_props = ["posts", "postsPerPage"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("posts" in $$props) $$invalidate(0, posts = $$props.posts);
		if ("postsPerPage" in $$props) $$invalidate(1, postsPerPage = $$props.postsPerPage);
	};

	$$self.$capture_state = () => {
		return { posts, postsPerPage };
	};

	$$self.$inject_state = $$props => {
		if ("posts" in $$props) $$invalidate(0, posts = $$props.posts);
		if ("postsPerPage" in $$props) $$invalidate(1, postsPerPage = $$props.postsPerPage);
	};

	return [posts, postsPerPage];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { posts: 0, postsPerPage: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*posts*/ ctx[0] === undefined && !("posts" in props)) {
			console.warn("<Routes> was created without expected prop 'posts'");
		}

		if (/*postsPerPage*/ ctx[1] === undefined && !("postsPerPage" in props)) {
			console.warn("<Routes> was created without expected prop 'postsPerPage'");
		}
	}

	get posts() {
		throw new Error("<Routes>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set posts(value) {
		throw new Error("<Routes>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get postsPerPage() {
		throw new Error("<Routes>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set postsPerPage(value) {
		throw new Error("<Routes>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Routes;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguY2I4MGU0MGYuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQgY29udGV4dD1cIm1vZHVsZVwiPlxuICBleHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJlbG9hZChwYWdlLCBzZXNzaW9uKSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5mZXRjaChgaW5kZXguanNvbmApO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVzLmpzb24oKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfVxuPC9zY3JpcHQ+XG5cbjxzY3JpcHQ+XG4gIGltcG9ydCBQb3N0cyBmcm9tICcuLi9jb21wb25lbnRzL1Bvc3RzLnN2ZWx0ZSc7XG4gIGltcG9ydCBCcmVhZGNydW1iIGZyb20gJy4uL2NvbXBvbmVudHMvQnJlYWRjcnVtYi5zdmVsdGUnO1xuXG4gIGV4cG9ydCBsZXQgcG9zdHM7XG4gIGV4cG9ydCBsZXQgcG9zdHNQZXJQYWdlO1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiPlxuICBAbWl4aW4gaW1hZ2Uge1xuICAgIGhlaWdodDogMjVyZW07XG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xuICAgIG1hcmdpbjogMTVweCAwO1xuICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gICAgYm94LXNoYWRvdzogMCA0cHggMjBweCByZ2JhKDE1MCwgMTUwLCAxNTAsIDAuMjUpO1xuICAgIC13ZWJraXQtYm94LXNoYWRvdzogMCA0cHggMjBweCByZ2JhKDE1MCwgMTUwLCAxNTAsIDAuMjUpO1xuICAgIHRyYW5zaXRpb246IDI1MG1zIGVhc2UtaW4gYWxsO1xuICB9XG4gIC5oZXJvLXNlY3Rpb24ge1xuICAgIHBhZGRpbmc6IDNyZW0gMnJlbTtcbiAgICBmb250LXNpemU6IDJyZW07XG4gICAgbWF4LXdpZHRoOiA1MCU7XG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gIH1cbiAgaDEge1xuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gICAgZm9udC1zaXplOiA0cmVtO1xuICAgIGxpbmUtaGVpZ2h0OiA0LjVyZW07XG4gIH1cbiAgOmdsb2JhbChpbWcpLFxuICA6Z2xvYmFsKC5pbWFnZSkge1xuICAgIEBpbmNsdWRlIGltYWdlO1xuICB9XG4gIEBtZWRpYSAobWF4LXdpZHRoOiA3NjdweCkge1xuICAgIGgxIHtcbiAgICAgIGZvbnQtc2l6ZTogM3JlbTtcbiAgICAgIGxpbmUtaGVpZ2h0OiAzLjVyZW07XG4gICAgfVxuICB9XG48L3N0eWxlPlxuXG48c3ZlbHRlOmhlYWQ+XG4gIDx0aXRsZT5TdHVubmluZyBUaGVtZTwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuXG48ZGl2IGNsYXNzPVwiaGVyby1zZWN0aW9uXCI+XG4gIDxoMT5XZWxjb21lIG9uIG15IGJsb2c8L2gxPlxuICA8cD5FeHBsb3JlIGFsbCBteSBhZGVudHVyZXM8L3A+XG48L2Rpdj5cblxuPFBvc3RzIHtwb3N0c30gbGltaXQ9e3Bvc3RzUGVyUGFnZX0gLz5cblxuPEJyZWFkY3J1bWIgaXNGaXJzdD17dHJ1ZX0gaXNMYXN0PXtwb3N0c1BlclBhZ2UgPiBwb3N0cy5sZW5ndGh9IHBhZ2U9XCIxXCIgLz5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NEJBNkRzQixHQUFZOzs7Ozs7Ozs2QkFFQyxHQUFZLGdCQUFHLEdBQUssSUFBQyxNQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NEVBRnhDLEdBQVk7Ozt1RkFFQyxHQUFZLGdCQUFHLEdBQUssSUFBQyxNQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztlQTlEdEMsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPO09BQ25DLEdBQUcsU0FBUyxJQUFJLENBQUMsS0FBSztPQUN0QixRQUFRLFNBQVMsR0FBRyxDQUFDLElBQUk7UUFFeEIsUUFBUTs7OztPQUROLEtBQUs7T0FDTCxZQUFZOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
