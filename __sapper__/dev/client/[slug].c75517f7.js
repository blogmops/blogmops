import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, a as space, e as element, t as text, h as claim_space, c as claim_element, b as children, f as claim_text, g as detach_dev, j as attr_dev, k as add_location, m as insert_dev, o as append_dev, B as set_data_dev, n as noop } from './index.d5c520b0.js';

/*!
 * reading-time
 * Copyright (c) Nicolas Gryman <ngryman@gmail.com>
 * MIT Licensed
 */

function ansiWordBound(c) {
  return (
    (' ' === c) ||
    ('\n' === c) ||
    ('\r' === c) ||
    ('\t' === c)
  )
}

function readingTime(text, options) {
  var words = 0, start = 0, end = text.length - 1, wordBound, i;

  options = options || {};

  // use default values if necessary
  options.wordsPerMinute = options.wordsPerMinute || 200;

  // use provided function if available
  wordBound = options.wordBound || ansiWordBound;

  // fetch bounds
  while (wordBound(text[start])) start++;
  while (wordBound(text[end])) end--;

  // calculate the number of words
  for (i = start; i <= end;) {
    for (; i <= end && !wordBound(text[i]); i++) ;
    words++;
    for (; i <= end && wordBound(text[i]); i++) ;
  }

  // reading time stats
  var minutes = words / options.wordsPerMinute;
  var time = minutes * 60 * 1000;
  var displayed = Math.ceil(minutes.toFixed(2));

  return {
    text: displayed + ' min read',
    minutes: minutes,
    time: time,
    words: words
  }
}

/**
 * Export
 */
var readingTime_1 = readingTime;

var readingTime$1 = readingTime_1;

/* src\routes\blog\[slug].svelte generated by Svelte v3.16.7 */
const file = "src\\routes\\blog\\[slug].svelte";

function create_fragment(ctx) {
	let title_value;
	let t0;
	let div1;
	let h1;
	let t1_value = /*post*/ ctx[0].frontmatter.title + "";
	let t1;
	let t2;
	let p;
	let t3_value = new Date(/*post*/ ctx[0].frontmatter.date).toDateString() + "";
	let t3;
	let t4;
	let t5;
	let t6;
	let img;
	let img_src_value;
	let img_alt_value;
	let t7;
	let div0;
	let raw_value = /*post*/ ctx[0].contentHtml + "";
	document.title = title_value = /*post*/ ctx[0].frontmatter.title;

	const block = {
		c: function create() {
			t0 = space();
			div1 = element("div");
			h1 = element("h1");
			t1 = text(t1_value);
			t2 = space();
			p = element("p");
			t3 = text(t3_value);
			t4 = text(" ﹒ ");
			t5 = text(/*readingTime*/ ctx[1]);
			t6 = space();
			img = element("img");
			t7 = space();
			div0 = element("div");
			this.h();
		},
		l: function claim(nodes) {
			t0 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h1 = claim_element(div1_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, t1_value);
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(div1_nodes);
			p = claim_element(div1_nodes, "P", { class: true });
			var p_nodes = children(p);
			t3 = claim_text(p_nodes, t3_value);
			t4 = claim_text(p_nodes, " ﹒ ");
			t5 = claim_text(p_nodes, /*readingTime*/ ctx[1]);
			p_nodes.forEach(detach_dev);
			t6 = claim_space(div1_nodes);
			img = claim_element(div1_nodes, "IMG", { src: true, alt: true, class: true });
			t7 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "svelte-35w4os");
			add_location(h1, file, 83, 2, 1743);
			attr_dev(p, "class", "post-meta svelte-35w4os");
			add_location(p, file, 84, 2, 1779);
			if (img.src !== (img_src_value = /*post*/ ctx[0].frontmatter.preview)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*post*/ ctx[0].frontmatter.title);
			attr_dev(img, "class", "svelte-35w4os");
			add_location(img, file, 87, 2, 1879);
			attr_dev(div0, "class", "content svelte-35w4os");
			add_location(div0, file, 89, 2, 1950);
			attr_dev(div1, "class", "container svelte-35w4os");
			add_location(div1, file, 82, 0, 1717);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, h1);
			append_dev(h1, t1);
			append_dev(div1, t2);
			append_dev(div1, p);
			append_dev(p, t3);
			append_dev(p, t4);
			append_dev(p, t5);
			append_dev(div1, t6);
			append_dev(div1, img);
			append_dev(div1, t7);
			append_dev(div1, div0);
			div0.innerHTML = raw_value;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*post*/ 1 && title_value !== (title_value = /*post*/ ctx[0].frontmatter.title)) {
				document.title = title_value;
			}

			if (dirty & /*post*/ 1 && t1_value !== (t1_value = /*post*/ ctx[0].frontmatter.title + "")) set_data_dev(t1, t1_value);
			if (dirty & /*post*/ 1 && t3_value !== (t3_value = new Date(/*post*/ ctx[0].frontmatter.date).toDateString() + "")) set_data_dev(t3, t3_value);
			if (dirty & /*readingTime*/ 2) set_data_dev(t5, /*readingTime*/ ctx[1]);

			if (dirty & /*post*/ 1 && img.src !== (img_src_value = /*post*/ ctx[0].frontmatter.preview)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*post*/ 1 && img_alt_value !== (img_alt_value = /*post*/ ctx[0].frontmatter.title)) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty & /*post*/ 1 && raw_value !== (raw_value = /*post*/ ctx[0].contentHtml + "")) div0.innerHTML = raw_value;		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload({ params, query }) {
	const res = await this.fetch(`blog/${params.slug}.json`);
	const data = await res.json();

	if (res.status === 200) {
		return { post: data };
	} else {
		this.error(res.status, data.message);
	}
}

function instance($$self, $$props, $$invalidate) {
	let { post } = $$props;
	const writable_props = ["post"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<U5Bslugu5D> was created with unknown prop '${key}'`);
	});

	$$self.$set = $$props => {
		if ("post" in $$props) $$invalidate(0, post = $$props.post);
	};

	$$self.$capture_state = () => {
		return { post, readingTimeData, readingTime };
	};

	$$self.$inject_state = $$props => {
		if ("post" in $$props) $$invalidate(0, post = $$props.post);
		if ("readingTimeData" in $$props) $$invalidate(2, readingTimeData = $$props.readingTimeData);
		if ("readingTime" in $$props) $$invalidate(1, readingTime = $$props.readingTime);
	};

	let readingTimeData;
	let readingTime;

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*post*/ 1) {
			 $$invalidate(2, readingTimeData = readingTime$1(post.contentHtml));
		}

		if ($$self.$$.dirty & /*readingTimeData*/ 4) {
			 $$invalidate(1, readingTime = `${Math.ceil(readingTimeData.minutes)} minute${Math.ceil(readingTimeData.minutes) > 1 ? "(s)" : ""} read`);
		}
	};

	return [post, readingTime];
}

class U5Bslugu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { post: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bslugu5D",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || ({});

		if (/*post*/ ctx[0] === undefined && !("post" in props)) {
			console.warn("<U5Bslugu5D> was created without expected prop 'post'");
		}
	}

	get post() {
		throw new Error("<U5Bslugu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set post(value) {
		throw new Error("<U5Bslugu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Bslugu5D;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
